{
  "url": "https://api.github.com/repos/alibaba/weex/issues/1786",
  "repository_url": "https://api.github.com/repos/alibaba/weex",
  "labels_url": "https://api.github.com/repos/alibaba/weex/issues/1786/labels{/name}",
  "comments_url": "https://api.github.com/repos/alibaba/weex/issues/1786/comments",
  "events_url": "https://api.github.com/repos/alibaba/weex/issues/1786/events",
  "html_url": "https://github.com/alibaba/weex/issues/1786",
  "id": 192731666,
  "number": 1786,
  "title": "利用 callBack 回调时 如果结构复杂的话无法回调成功  安卓的可以利用fireGlobalEventCallback iOS 端该如何修改?",
  "user": {
    "login": "MrDragonn",
    "id": 15952009,
    "avatar_url": "https://avatars3.githubusercontent.com/u/15952009?v=3",
    "gravatar_id": "",
    "url": "https://api.github.com/users/MrDragonn",
    "html_url": "https://github.com/MrDragonn",
    "followers_url": "https://api.github.com/users/MrDragonn/followers",
    "following_url": "https://api.github.com/users/MrDragonn/following{/other_user}",
    "gists_url": "https://api.github.com/users/MrDragonn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/MrDragonn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/MrDragonn/subscriptions",
    "organizations_url": "https://api.github.com/users/MrDragonn/orgs",
    "repos_url": "https://api.github.com/users/MrDragonn/repos",
    "events_url": "https://api.github.com/users/MrDragonn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/MrDragonn/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [],
  "milestone": null,
  "comments": [
    {
      "url": "https://api.github.com/repos/alibaba/weex/issues/comments/264052830",
      "html_url": "https://github.com/alibaba/weex/issues/1786#issuecomment-264052830",
      "issue_url": "https://api.github.com/repos/alibaba/weex/issues/1786",
      "id": 264052830,
      "user": {
        "login": "MrDragonn",
        "id": 15952009,
        "avatar_url": "https://avatars3.githubusercontent.com/u/15952009?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MrDragonn",
        "html_url": "https://github.com/MrDragonn",
        "followers_url": "https://api.github.com/users/MrDragonn/followers",
        "following_url": "https://api.github.com/users/MrDragonn/following{/other_user}",
        "gists_url": "https://api.github.com/users/MrDragonn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/MrDragonn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/MrDragonn/subscriptions",
        "organizations_url": "https://api.github.com/users/MrDragonn/orgs",
        "repos_url": "https://api.github.com/users/MrDragonn/repos",
        "events_url": "https://api.github.com/users/MrDragonn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/MrDragonn/received_events",
        "type": "User",
        "site_admin": false
      },
      "created_at": "2016-12-01T01:36:36Z",
      "updated_at": "2016-12-01T01:36:36Z",
      "body": "自己仿照 baseViewController 写了个 control 找了好久都没找到如何修改\r\nfireGlobalEventCallback 求大神指点\r\n```\r\n//\r\n//  WX_BaseViewController.m\r\n//  Workbench\r\n//\r\n//  Created by MT on 16/11/24.\r\n//  Copyright © 2016年 MT. All rights reserved.\r\n//\r\n\r\n#import \"WX_BaseViewController.h\"\r\n#import \"WXRootViewController.h\"\r\n#import \"WXSDKInstance.h\"\r\n#import \"WXSDKInstance_private.h\"\r\n#import \"WXSDKEngine.h\"\r\n#import \"WXSDKManager.h\"\r\n#import \"WXUtility.h\"\r\n#import \"GuidePageViewController.h\"\r\n\r\n\r\n@interface WX_BaseViewController ()\r\n\r\n@property (nonatomic, strong) WXSDKInstance *instance;\r\n@property (nonatomic, strong) UIView *weexView;\r\n@property (nonatomic, strong) NSURL *sourceURL;\r\n@property (nonatomic,strong)NSMutableDictionary * WXData;\r\n@property (nonatomic,assign)BOOL  needResult;\r\n@property (nonatomic, strong) NSString * filename;\r\n\r\n@end\r\n\r\n@implementation WX_BaseViewController\r\n\r\n-(NSMutableDictionary *)WXData{\r\n    if (!_WXData) {\r\n        _WXData = [NSMutableDictionary dictionary];\r\n    }\r\n    return _WXData;\r\n    \r\n}\r\n- (void)dealloc\r\n{\r\n    [_instance destroyInstance];\r\n    [self _removeObservers];\r\n}\r\n\r\n- (instancetype)initWithSourceURL:(NSURL *)sourceURL Dic:(NSDictionary*)dic;\r\n{\r\n    if ((self = [super init])) {\r\n        self.sourceURL = sourceURL;\r\n        self.hidesBottomBarWhenPushed = YES;\r\n        NSDictionary * WXData = [dic objectForKey:@\"data\"];\r\n        if (WXData) {\r\n            [self.WXData setValue:WXData forKey:@\"wxPushInit\"];\r\n            \r\n        }else{\r\n            self.WXData = nil;\r\n        }\r\n        if ([dic objectForKey:@\"needResult\"])\r\n        {\r\n            //需要返回值\r\n            self.needResult = YES;\r\n        }\r\n        \r\n        if ([[dic objectForKey:@\"needFinish\"] isEqualToString:@\"0\"])\r\n        {\r\n            //不需要返回键;\r\n            [self.navigationController removeFromParentViewController];\r\n        }\r\n        \r\n        [self _addObservers];\r\n    }\r\n    return self;\r\n}\r\n\r\n- (instancetype)initWithWeFileName:(NSString *)filename\r\n{\r\n    if (self = [super init]) {\r\n        NSString *urlString = [NSString stringWithFormat:@\"%@%@\",kWeex_URL,filename];\r\n        self.sourceURL = [NSURL URLWithString:urlString];\r\n        self.hidesBottomBarWhenPushed = YES;\r\n        self.WXData = nil;\r\n        [self _addObservers];\r\n        self.filename = filename;\r\n    }\r\n    return self;\r\n}\r\n- (void)viewWillAppear:(BOOL)animated\r\n{\r\n    [super viewWillAppear:animated];\r\n    // 隐藏导航栏\r\n    [self.navigationController setNavigationBarHidden:YES];\r\n    \r\n}\r\n\r\n\r\n/**\r\n *  After setting the navbar hidden status , this function will be called automatically. In this function, we\r\n *  set the height of mainView equal to screen height, because there is something wrong with the layout of\r\n *  page content.\r\n */\r\n\r\n- (void)viewWillLayoutSubviews\r\n{\r\n    [super viewWillLayoutSubviews];\r\n    \r\n    if ([self.navigationController isKindOfClass:[WXRootViewController class]]) {\r\n        CGRect frame = self.view.frame;\r\n        frame.origin.y = 0;\r\n        frame.size.height = [UIScreen mainScreen].bounds.size.height;\r\n        self.view.frame = frame;\r\n    }\r\n}\r\n\r\n/**\r\n *  We assume that the initial state of viewController's navigitonBar is hidden.  By setting the attribute of\r\n *  'dataRole' equal to 'navbar', the navigationBar hidden will be NO.\r\n */\r\n- (void)viewDidLoad\r\n{\r\n    [super viewDidLoad];\r\n    \r\n    if ([self.filename isEqualToString:@\"home.js\"]) {\r\n        [self._network WBRefreshToken:[PDataManager GetLoginToken]];\r\n    }\r\n    \r\n    [self addEdgePop];\r\n//    id target = self.navigationController.interactivePopGestureRecognizer.delegate;\r\n    \r\n    //    // handleNavigationTransition:为系统私有API,即系统自带侧滑手势的回调方法，我们在自己的手势上直接用它的回调方法\r\n    //    UIPanGestureRecognizer *panGesture = [[UIPanGestureRecognizer alloc] initWithTarget:target action:@selector(handleNavigationTransition:)];\r\n    //    panGesture.delegate = self; // 设置手势代理，拦截手势触发\r\n    //    [self.view addGestureRecognizer:panGesture];\r\n    \r\n    // 一定要禁止系统自带的滑动手势\r\n    //    self.navigationController.interactivePopGestureRecognizer.enabled = NO;\r\n    \r\n    \r\n    self.view.backgroundColor = [UIColor whiteColor];\r\n    self.automaticallyAdjustsScrollViewInsets = NO;\r\n    [self _renderWithURL:_sourceURL];\r\n    \r\n    if ([self.navigationController isKindOfClass:[WXRootViewController class]]) {\r\n        self.navigationController.navigationBarHidden = YES;\r\n    }\r\n}\r\n\r\n- (void)addEdgePop\r\n{\r\n    UIScreenEdgePanGestureRecognizer *edgePanGestureRecognizer = [[UIScreenEdgePanGestureRecognizer alloc] initWithTarget:self action:@selector(edgePanGesture:)];\r\n    edgePanGestureRecognizer.delegate = self;\r\n    edgePanGestureRecognizer.edges = UIRectEdgeLeft;\r\n    [self.view addGestureRecognizer:edgePanGestureRecognizer];\r\n}\r\n\r\n- (void)edgePanGesture:(UIScreenEdgePanGestureRecognizer*)edgePanGestureRecognizer{\r\n    [self.navigationController popViewControllerAnimated:YES];\r\n}\r\n\r\n#pragma mark- UIGestureRecognizerDelegate\r\n- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer *)gestureRecognizer{\r\n    if (!self.navigationController || [self.navigationController.viewControllers count] == 1) {\r\n        return NO;\r\n    }\r\n    \r\n    return YES;\r\n}\r\n\r\n- (void)viewDidAppear:(BOOL)animated\r\n{\r\n    [super viewDidAppear:animated];\r\n    [self _updateInstanceState:WeexInstanceAppear];\r\n}\r\n\r\n- (void)viewDidDisappear:(BOOL)animated\r\n{\r\n    [super viewDidDisappear:animated];\r\n    [self _updateInstanceState:WeexInstanceDisappear];\r\n}\r\n\r\n- (void)didReceiveMemoryWarning\r\n{\r\n    [super didReceiveMemoryWarning];\r\n    [self _updateInstanceState:WeexInstanceMemoryWarning];\r\n    // Dispose of any resources that can be recreated.\r\n}\r\n\r\n- (void)refreshWeex\r\n{\r\n    [self _renderWithURL:_sourceURL];\r\n}\r\n\r\n- (void)_renderWithURL:(NSURL *)sourceURL\r\n{\r\n    if (!sourceURL) {\r\n        return;\r\n    }\r\n    \r\n    [_instance destroyInstance];\r\n    _instance = [[WXSDKInstance alloc] init];\r\n    _instance.frame = CGRectMake(0.0f, 0.0f, self.view.bounds.size.width, self.view.bounds.size.height);\r\n    _instance.pageObject = self;\r\n    _instance.pageName = [[WXUtility urlByDeletingParameters:sourceURL] absoluteString];\r\n    _instance.viewController = self;\r\n    \r\n    NSString *newURL = nil;\r\n    \r\n    if ([sourceURL.absoluteString rangeOfString:@\"?\"].location != NSNotFound) {\r\n        newURL = [NSString stringWithFormat:@\"%@&random=%d\", sourceURL.absoluteString, arc4random()];\r\n    }\r\n    else\r\n    {\r\n        newURL = [NSString stringWithFormat:@\"%@?random=%d\", sourceURL.absoluteString, arc4random()];\r\n    }\r\n    \r\n    \r\n    [_instance renderWithURL:[NSURL URLWithString:newURL] options:@{@\"bundleUrl\":sourceURL, @\"locale\": [PDataManager GetLocale]} data:self.WXData];\r\n    \r\n    __weak typeof(self) weakSelf = self;\r\n    _instance.onCreate = ^(UIView *view) {\r\n        [weakSelf.weexView removeFromSuperview];\r\n        weakSelf.weexView = view;\r\n        [weakSelf.view addSubview:weakSelf.weexView];\r\n    };\r\n    \r\n    _instance.onFailed = ^(NSError *error) {\r\n        \r\n    };\r\n    \r\n    _instance.renderFinish = ^(UIView *view) {\r\n        [weakSelf _updateInstanceState:WeexInstanceAppear];\r\n    };\r\n}\r\n\r\n- (void)_updateInstanceState:(WXState)state\r\n{\r\n    if (_instance && _instance.state != state) {\r\n        _instance.state = state;\r\n        \r\n        if (state == WeexInstanceAppear) {\r\n            [[WXSDKManager bridgeMgr] fireEvent:_instance.instanceId ref:WX_SDK_ROOT_REF type:@\"viewappear\" params:nil domChanges:nil];\r\n        }\r\n        else if (state == WeexInstanceDisappear) {\r\n            [[WXSDKManager bridgeMgr] fireEvent:_instance.instanceId ref:WX_SDK_ROOT_REF type:@\"viewdisappear\" params:nil domChanges:nil];\r\n        }\r\n    }\r\n}\r\n\r\n- (void)_appStateDidChange:(NSNotification *)nofity\r\n{\r\n    if ([nofity.name isEqualToString:@\"UIApplicationDidBecomeActiveNotification\"]) {\r\n        [self _updateInstanceState:WeexInstanceForeground];\r\n    }\r\n    else if([nofity.name isEqualToString:@\"UIApplicationDidEnterBackgroundNotification\"]) {\r\n        [self _updateInstanceState:WeexInstanceBackground]; ;\r\n    }\r\n}\r\n\r\n- (void)_addObservers\r\n{\r\n    for (NSString *name in @[UIApplicationDidBecomeActiveNotification,\r\n                             UIApplicationDidEnterBackgroundNotification]) {\r\n        [[NSNotificationCenter defaultCenter] addObserver:self\r\n                                                 selector:@selector(_appStateDidChange:)\r\n                                                     name:name\r\n                                                   object:nil];\r\n    }\r\n}\r\n\r\n- (void)_removeObservers\r\n{\r\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\r\n}\r\n\r\n-(void)networkStoped:(CTNetwork *)network success:(int)success\r\n{\r\n    [self removeWaitingView];\r\n    if (success==Result_Succeed)\r\n    {\r\n        if (network._netTag==WBNetworkTag_RefreshToken)// 刷新服务令牌\r\n        {\r\n            if ([network._data[@\"return_code\"] intValue] == 0)\r\n            {\r\n                NSLog(@\"data = %@\",network._data[@\"data\"]);\r\n                [PDataManager SetToken:[NSString stringWithFormat:@\"%@\",network._data[@\"data\"][@\"authInfo\"][@\"token\"]]];// 给token赋值\r\n                [PDataManager SetLoginToken:[NSString stringWithFormat:@\"%@\",network._data[@\"data\"][@\"authInfo\"][@\"loginToken\"]]];// 给loginToken赋值\r\n            } else {\r\n                //                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@\"提示\"\r\n                //                                                                message:network._data[@\"return_message\"]\r\n                //                                                               delegate:self\r\n                //                                                      cancelButtonTitle:nil\r\n                //                                                      otherButtonTitles:@\"确定\", nil];\r\n                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@\"提示\"\r\n                                                                message:@\"登录状态已过期，请重新登录。\"\r\n                                                               delegate:self\r\n                                                      cancelButtonTitle:nil\r\n                                                      otherButtonTitles:@\"确定\", nil];\r\n                [alert show];\r\n            }\r\n        }\r\n    }\r\n    else\r\n    {\r\n        [self showCustomAlert:network._data[@\"return_message\"]];\r\n    }\r\n}\r\n\r\n- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonInde\r\n{\r\n    NSMutableArray *vcs = [NSMutableArray arrayWithArray:self.navigationController.viewControllers];\r\n    GuidePageViewController *guideVC = [[GuidePageViewController alloc] initWithTitle:@\"\" HTMLStringWithResource:@\"guide\" ofType:@\"html\" AndDomainName:kDomainName];\r\n    [vcs removeAllObjects];\r\n    [vcs addObject:guideVC];\r\n    self.navigationController.viewControllers = vcs;\r\n    [self.navigationController popToViewController:guideVC animated:YES];\r\n}\r\n\r\n\r\n\r\n@end\r\n\r\n```"
    }
  ],
  "created_at": "2016-12-01T01:35:05Z",
  "updated_at": "2016-12-01T03:07:04Z",
  "closed_at": "2016-12-01T03:07:04Z",
  "body": "",
  "closed_by": {
    "login": "MrDragonn",
    "id": 15952009,
    "avatar_url": "https://avatars3.githubusercontent.com/u/15952009?v=3",
    "gravatar_id": "",
    "url": "https://api.github.com/users/MrDragonn",
    "html_url": "https://github.com/MrDragonn",
    "followers_url": "https://api.github.com/users/MrDragonn/followers",
    "following_url": "https://api.github.com/users/MrDragonn/following{/other_user}",
    "gists_url": "https://api.github.com/users/MrDragonn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/MrDragonn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/MrDragonn/subscriptions",
    "organizations_url": "https://api.github.com/users/MrDragonn/orgs",
    "repos_url": "https://api.github.com/users/MrDragonn/repos",
    "events_url": "https://api.github.com/users/MrDragonn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/MrDragonn/received_events",
    "type": "User",
    "site_admin": false
  }
}
