{
  "url": "https://api.github.com/repos/alibaba/weex/issues/1938",
  "repository_url": "https://api.github.com/repos/alibaba/weex",
  "labels_url": "https://api.github.com/repos/alibaba/weex/issues/1938/labels{/name}",
  "comments_url": "https://api.github.com/repos/alibaba/weex/issues/1938/comments",
  "events_url": "https://api.github.com/repos/alibaba/weex/issues/1938/events",
  "html_url": "https://github.com/alibaba/weex/issues/1938",
  "id": 196324998,
  "number": 1938,
  "title": "[proposal] JS service layer",
  "user": {
    "login": "Jinjiang",
    "id": 206848,
    "avatar_url": "https://avatars2.githubusercontent.com/u/206848?v=3",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Jinjiang",
    "html_url": "https://github.com/Jinjiang",
    "followers_url": "https://api.github.com/users/Jinjiang/followers",
    "following_url": "https://api.github.com/users/Jinjiang/following{/other_user}",
    "gists_url": "https://api.github.com/users/Jinjiang/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Jinjiang/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Jinjiang/subscriptions",
    "organizations_url": "https://api.github.com/users/Jinjiang/orgs",
    "repos_url": "https://api.github.com/users/Jinjiang/repos",
    "events_url": "https://api.github.com/users/Jinjiang/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Jinjiang/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 359381537,
      "url": "https://api.github.com/repos/alibaba/weex/labels/js%20runtime",
      "name": "js runtime",
      "color": "f9d0c4",
      "default": false
    },
    {
      "id": 473484279,
      "url": "https://api.github.com/repos/alibaba/weex/labels/new%20feature",
      "name": "new feature",
      "color": "1d76db",
      "default": false
    },
    {
      "id": 488748270,
      "url": "https://api.github.com/repos/alibaba/weex/labels/proposal",
      "name": "proposal",
      "color": "fbca04",
      "default": false
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [],
  "milestone": null,
  "comments": [
    {
      "url": "https://api.github.com/repos/alibaba/weex/issues/comments/268014936",
      "html_url": "https://github.com/alibaba/weex/issues/1938#issuecomment-268014936",
      "issue_url": "https://api.github.com/repos/alibaba/weex/issues/1938",
      "id": 268014936,
      "user": {
        "login": "Jinjiang",
        "id": 206848,
        "avatar_url": "https://avatars2.githubusercontent.com/u/206848?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Jinjiang",
        "html_url": "https://github.com/Jinjiang",
        "followers_url": "https://api.github.com/users/Jinjiang/followers",
        "following_url": "https://api.github.com/users/Jinjiang/following{/other_user}",
        "gists_url": "https://api.github.com/users/Jinjiang/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Jinjiang/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Jinjiang/subscriptions",
        "organizations_url": "https://api.github.com/users/Jinjiang/orgs",
        "repos_url": "https://api.github.com/users/Jinjiang/repos",
        "events_url": "https://api.github.com/users/Jinjiang/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Jinjiang/received_events",
        "type": "User",
        "site_admin": false
      },
      "created_at": "2016-12-19T16:49:04Z",
      "updated_at": "2016-12-19T16:49:04Z",
      "body": "Additionally we can move native callback management from each framework to common runtime.\r\n\r\nHere is a simple implementation https://github.com/Jinjiang/weex/blob/jsfm-feature-service/html5/runtime/callback-manager.js\r\nand also we have rebuilt `BroadcastChannel` polyfill as a JS service https://github.com/Jinjiang/weex/blob/jsfm-feature-service/html5/services/broadcast-channel/index.js"
    },
    {
      "url": "https://api.github.com/repos/alibaba/weex/issues/comments/268181310",
      "html_url": "https://github.com/alibaba/weex/issues/1938#issuecomment-268181310",
      "issue_url": "https://api.github.com/repos/alibaba/weex/issues/1938",
      "id": 268181310,
      "user": {
        "login": "seajean",
        "id": 1409603,
        "avatar_url": "https://avatars3.githubusercontent.com/u/1409603?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/seajean",
        "html_url": "https://github.com/seajean",
        "followers_url": "https://api.github.com/users/seajean/followers",
        "following_url": "https://api.github.com/users/seajean/following{/other_user}",
        "gists_url": "https://api.github.com/users/seajean/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/seajean/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/seajean/subscriptions",
        "organizations_url": "https://api.github.com/users/seajean/orgs",
        "repos_url": "https://api.github.com/users/seajean/repos",
        "events_url": "https://api.github.com/users/seajean/events{/privacy}",
        "received_events_url": "https://api.github.com/users/seajean/received_events",
        "type": "User",
        "site_admin": false
      },
      "created_at": "2016-12-20T08:13:56Z",
      "updated_at": "2016-12-20T08:16:32Z",
      "body": "Seems like it is a runtime hook, good to develope runtime plugin. But I can't get the idea how to register an lib and use it in the bundle code. Any example code?"
    },
    {
      "url": "https://api.github.com/repos/alibaba/weex/issues/comments/268240139",
      "html_url": "https://github.com/alibaba/weex/issues/1938#issuecomment-268240139",
      "issue_url": "https://api.github.com/repos/alibaba/weex/issues/1938",
      "id": 268240139,
      "user": {
        "login": "IskenHuang",
        "id": 731134,
        "avatar_url": "https://avatars0.githubusercontent.com/u/731134?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/IskenHuang",
        "html_url": "https://github.com/IskenHuang",
        "followers_url": "https://api.github.com/users/IskenHuang/followers",
        "following_url": "https://api.github.com/users/IskenHuang/following{/other_user}",
        "gists_url": "https://api.github.com/users/IskenHuang/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/IskenHuang/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/IskenHuang/subscriptions",
        "organizations_url": "https://api.github.com/users/IskenHuang/orgs",
        "repos_url": "https://api.github.com/users/IskenHuang/repos",
        "events_url": "https://api.github.com/users/IskenHuang/events{/privacy}",
        "received_events_url": "https://api.github.com/users/IskenHuang/received_events",
        "type": "User",
        "site_admin": false
      },
      "created_at": "2016-12-20T13:14:46Z",
      "updated_at": "2016-12-27T04:11:24Z",
      "body": "After our discussion today. Currently we hope the service concept can be register/unregister from native. Weex has only one runtime in app. If we lost any variable after destroy instance will be memory leak. \r\n\r\njs bundle code example: \r\n```\r\n<script>\r\nvar Utils = new Services.utils()\r\nmodule.exports = {\r\n    created: function() {\r\n        Utils.alert('Hello world~')\r\n    }\r\n}\r\n</script>\r\n```\r\n\r\nNative register this code example\r\n```\r\n[WXSDKEngine registerService: @\"SERVICE_NAME\" withScript:@\"JS_CODE\" withOptions:@{ @\"a\": @\"1\" }  ];\r\n[WXSDKEngine unregisterService: @\"SERVICE_NAME\"];\r\n```\r\n\r\nNative will exec this code to runtime. For example:\r\n```\r\n(function(service, options) {\r\n    /* js service code here */\r\n})({\r\n    register: global.registerService, // register service\r\n    unregister: global.unregisterService, // unregister service\r\n}, {\r\n    serviceName: 'SERVICE_NAME' // create from name code. this object can be extend from native\r\n})\r\n```"
    },
    {
      "url": "https://api.github.com/repos/alibaba/weex/issues/comments/268417282",
      "html_url": "https://github.com/alibaba/weex/issues/1938#issuecomment-268417282",
      "issue_url": "https://api.github.com/repos/alibaba/weex/issues/1938",
      "id": 268417282,
      "user": {
        "login": "seajean",
        "id": 1409603,
        "avatar_url": "https://avatars3.githubusercontent.com/u/1409603?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/seajean",
        "html_url": "https://github.com/seajean",
        "followers_url": "https://api.github.com/users/seajean/followers",
        "following_url": "https://api.github.com/users/seajean/following{/other_user}",
        "gists_url": "https://api.github.com/users/seajean/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/seajean/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/seajean/subscriptions",
        "organizations_url": "https://api.github.com/users/seajean/orgs",
        "repos_url": "https://api.github.com/users/seajean/repos",
        "events_url": "https://api.github.com/users/seajean/events{/privacy}",
        "received_events_url": "https://api.github.com/users/seajean/received_events",
        "type": "User",
        "site_admin": false
      },
      "created_at": "2016-12-21T02:27:37Z",
      "updated_at": "2016-12-21T02:27:51Z",
      "body": "Codes shown above are not the codes I asked for, If I register a module call  'ABC',\r\nI should be able to register something like\r\n`weex.regsiterModule('ABC');`\r\nand in my bundle code I should be able to use `var my_module = require('ABC')`;"
    },
    {
      "url": "https://api.github.com/repos/alibaba/weex/issues/comments/268698652",
      "html_url": "https://github.com/alibaba/weex/issues/1938#issuecomment-268698652",
      "issue_url": "https://api.github.com/repos/alibaba/weex/issues/1938",
      "id": 268698652,
      "user": {
        "login": "IskenHuang",
        "id": 731134,
        "avatar_url": "https://avatars0.githubusercontent.com/u/731134?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/IskenHuang",
        "html_url": "https://github.com/IskenHuang",
        "followers_url": "https://api.github.com/users/IskenHuang/followers",
        "following_url": "https://api.github.com/users/IskenHuang/following{/other_user}",
        "gists_url": "https://api.github.com/users/IskenHuang/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/IskenHuang/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/IskenHuang/subscriptions",
        "organizations_url": "https://api.github.com/users/IskenHuang/orgs",
        "repos_url": "https://api.github.com/users/IskenHuang/repos",
        "events_url": "https://api.github.com/users/IskenHuang/events{/privacy}",
        "received_events_url": "https://api.github.com/users/IskenHuang/received_events",
        "type": "User",
        "site_admin": false
      },
      "created_at": "2016-12-22T01:59:24Z",
      "updated_at": "2016-12-27T04:11:42Z",
      "body": "@seajean\r\nJS runtime and JS service are parallel. You can init each service in your instance like `var my_module = new Services.ABC()`. Don't needs to register this in bundle code."
    }
  ],
  "created_at": "2016-12-19T03:38:15Z",
  "updated_at": "2017-03-01T06:51:38Z",
  "closed_at": null,
  "body": "To support extendable JS services for different app or business logics without updating JS framework itself and managing JavaScript memories better for all Weex instances.\r\n\r\n## Background\r\n\r\n* Different apps has different requirements in JavaScript libs.\r\n* Lots of JS bundles reuse the same JavaScript libs but can not be shared in runtime.\r\n* Functions can not be passed into native. Currently we automatically convert function parameters into callback ids and then pass them into native. But for functions in a parameter object, it fails.\r\n* Most JavaScript polyfills can not manage their memories well between different Weex instances. We always have to release some JS objects manually for them when a Weex instance destroyed.\r\n\r\n## Purpose\r\n\r\nWe can make a \"service layer\" in JavaScript runtime to solve these problems one time. Each JS service can inject some instance variables when such a Weex instance created in such a JS framework. And it can make hooks when the instance created, refreshed or destroyed.\r\n\r\n## Details\r\n\r\nrefs: [WHATWG HTML Living Standard: 9.6 Broadcasting to other browsing contexts](https://html.spec.whatwg.org/multipage/comms.html#broadcasting-to-other-browsing-contexts)\r\n\r\n### Changes for Render Layer\r\n\r\n(nothing to change)\r\n\r\n### Changes for JS Runtime\r\n\r\n* Added `runtime.service.register(name, config)` and `runtime.service.unregister(name)` for `runtime`.\r\n* Call hooks of each `service` when `createInstance`, `refreshInstance` and `destroyInstance` in JS runtime.\r\n* Added a `instanceObjects` parameter in `createInstance(id, code, config, data, serviceObjects)` for each JS framework.\r\n* Added each variables in `instanceObjects` to each Weex instance closure when `createInstance` by a JS framework.\r\n\r\n### Changes for Tools\r\n\r\n* Make a tool or enhance current JS framework build config to concat services when build a JS framework for a certain App like Taobao, Qianniu etc.\r\n\r\n### Developer Experiences\r\n\r\nIn Weex JS runtime. We can call\r\n\r\n```javascript\r\nruntime.service.register(serviceName, {\r\n  /**\r\n   * Optional.\r\n   * Hook when a Weex instance created\r\n   * @param  {string} id     Weex instance id\r\n   * @param  {object} env    Weex environment object\r\n   * @param  {object} config Weex instance config\r\n   * @return {object}        The variables which should be injected\r\n   *                         into the instane runtime\r\n   */\r\n  create: function (id, env, config) { ... },\r\n  /**\r\n   * Optional.\r\n   * Hook when a Weex instance refreshed by native\r\n   * @param  {string} id     Weex instance id\r\n   * @param  {object} env    Weex environment object\r\n   */\r\n  refresh: function (id, env) { ... },\r\n  /**\r\n   * Optional.\r\n   * Hook when a Weex instance destroyed\r\n   * @param  {string} id     Weex instance id\r\n   * @param  {object} env    Weex environment object\r\n   */\r\n  destroy: function (id, env) {...}\r\n})\r\n```\r\n\r\n## Notes\r\n\r\n* We can rebuild (a better) `BroadcastChannel` polyfill and HTML5 Timer APIs with this.",
  "closed_by": null
}
